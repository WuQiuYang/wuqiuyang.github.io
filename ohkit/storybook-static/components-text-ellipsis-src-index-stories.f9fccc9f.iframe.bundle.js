"use strict";(self.webpackChunk_ohkit_site=self.webpackChunk_ohkit_site||[]).push([[193],{"./src/components/text-ellipsis/src/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Bottom:()=>Bottom,CustomWithPopover:()=>CustomWithPopover,CustomWithTooltip:()=>CustomWithTooltip,RichText:()=>RichText,RichTextHeightMode:()=>RichTextHeightMode,RichTextHeightModeAuto:()=>RichTextHeightModeAuto,Right:()=>Right,RightAuto:()=>RightAuto,RightCustom:()=>RightCustom,ShowWhiteSpace:()=>ShowWhiteSpace,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),_barrel_optimize_names_Button_Popover_Tooltip_antd__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/antd/es/button/index.js"),_barrel_optimize_names_Button_Popover_Tooltip_antd__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/antd/es/tooltip/index.js"),_barrel_optimize_names_Button_Popover_Tooltip_antd__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./node_modules/antd/es/popover/index.js"),_barrel_optimize_names_DownOutlined_UpOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@ant-design/icons/es/icons/DownOutlined.js"),_barrel_optimize_names_DownOutlined_UpOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@ant-design/icons/es/icons/UpOutlined.js"),___WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/text-ellipsis/src/index.tsx"),_test_data__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/text-ellipsis/src/__test__/data.tsx"),console=__webpack_require__("./node_modules/console-browserify/index.js");const __WEBPACK_DEFAULT_EXPORT__={component:___WEBPACK_IMPORTED_MODULE_2__.T,tags:["autodocs"]},Right={args:{lines:2,content:_test_data__WEBPACK_IMPORTED_MODULE_3__.Q}},RightAuto={args:{content:_test_data__WEBPACK_IMPORTED_MODULE_3__.Q,showFoldControl:!1,style:{height:60,backgroundColor:"pink"}}},RightCustom={args:{lines:2,content:_test_data__WEBPACK_IMPORTED_MODULE_3__.Q,fold:!1,resetFoldWhenChildrenOrEllipsisChange:!0,showTitleWhenFold:!0,renderFoldButton:fold=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(_barrel_optimize_names_Button_Popover_Tooltip_antd__WEBPACK_IMPORTED_MODULE_4__.Ay,{size:"small",type:"link",color:"primary",iconPosition:"end",icon:fold?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_DownOutlined_UpOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_5__.A,{}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_DownOutlined_UpOutlined_ant_design_icons__WEBPACK_IMPORTED_MODULE_6__.A,{}),children:["自定义",fold?"展开":"收起"]})}},Bottom={args:{lines:2,uiType:"bottom",showTitleWhenFold:!0,titleWhenFold:"如果太长了hover我也就不展示全了，可自定义title文案",content:_test_data__WEBPACK_IMPORTED_MODULE_3__.Q,lineHeight:"22px"}},RichText={args:{lines:7,uiType:"bottom",content:_test_data__WEBPACK_IMPORTED_MODULE_3__.N}},RichTextHeightMode={args:{lines:3,maxHeight:240,truncateMode:"height",uiType:"bottom",content:_test_data__WEBPACK_IMPORTED_MODULE_3__.N}},RichTextHeightModeAuto={args:{truncateMode:"height",uiType:"bottom",content:_test_data__WEBPACK_IMPORTED_MODULE_3__.N,showFoldControl:!1,style:{height:220,backgroundColor:"pink"}}},CustomWithTooltip={render:args=>{const[visible,setVisible]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),[title,setTitle]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(""),handleVisibleChange=(0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(newVisible=>{console.log("handleVisibleChange newVisible",newVisible),setVisible(newVisible)},[]),handleStatusChange=(0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(status=>{console.log("触发了 onStatusChange 回调",status);const{ellipsis,fold,title}=status;ellipsis&&fold&&title?setTitle(title):(setTitle(""),setVisible(!1))},[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Button_Popover_Tooltip_antd__WEBPACK_IMPORTED_MODULE_7__.A,{title:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{maxHeight:350,overflowY:"auto"},children:title}),open:visible,onOpenChange:title?handleVisibleChange:void 0,placement:"bottomRight",mouseEnterDelay:.3,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.T,{...args,onStatusChange:handleStatusChange})})},args:{lines:2,uiType:"right",content:"适合不是特别长的文本，太长出滚动条比较丑:\n"+_test_data__WEBPACK_IMPORTED_MODULE_3__.Q,lineHeight:"22px",onFoldChange:fold=>{console.log("触发了 onFoldChange 回调 fold",fold)},onEllipsisChange:ellipsis=>{console.log("触发了 onEllipsisChange 回调 ellipsis",ellipsis)}}},CustomWithPopover={render:args=>{const[visible,setVisible]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1),[title,setTitle]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(""),handleVisibleChange=(0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(newVisible=>{setVisible(newVisible)},[]),handleStatusChange=(0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(status=>{console.log("触发了 onStatusChange 回调",status);const{ellipsis,fold,title}=status;ellipsis&&fold&&title?setTitle(title):(setTitle(""),setVisible(!1))},[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_barrel_optimize_names_Button_Popover_Tooltip_antd__WEBPACK_IMPORTED_MODULE_8__.A,{title:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{maxHeight:300,maxWidth:400,overflowY:"auto"},children:title}),open:visible,onOpenChange:title?handleVisibleChange:void 0,placement:"bottomRight",mouseEnterDelay:.3,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.T,{...args,onStatusChange:handleStatusChange})})},args:{lines:2,uiType:"right",showFoldControl:!1,content:"适合超长文本，出滚动条:\n"+_test_data__WEBPACK_IMPORTED_MODULE_3__.Q+_test_data__WEBPACK_IMPORTED_MODULE_3__.Q+_test_data__WEBPACK_IMPORTED_MODULE_3__.Q,lineHeight:"22px",onFoldChange:fold=>{console.log("触发了 onFoldChange 回调 fold",fold)},onEllipsisChange:ellipsis=>{console.log("触发了 onEllipsisChange 回调 ellipsis",ellipsis)}}},ShowWhiteSpace={args:{lines:2,content:_test_data__WEBPACK_IMPORTED_MODULE_3__.Q,whiteSpace:"pre-line"}},__namedExportsOrder=["Right","RightAuto","RightCustom","Bottom","RichText","RichTextHeightMode","RichTextHeightModeAuto","CustomWithTooltip","CustomWithPopover","ShowWhiteSpace"];Right.parameters={...Right.parameters,docs:{...Right.parameters?.docs,source:{originalSource:"{\n  args: {\n    lines: 2,\n    content: text\n  }\n}",...Right.parameters?.docs?.source}}},RightAuto.parameters={...RightAuto.parameters,docs:{...RightAuto.parameters?.docs,source:{originalSource:"{\n  args: {\n    // lines: 1,\n    content: text,\n    // 未设置于truncateMode对应lines或maxHeight属性时，内容撑满容器，一般不显示展开/折叠按钮（展开溢出容器看不见)\n    showFoldControl: false,\n    style: {\n      height: 60,\n      backgroundColor: 'pink'\n    }\n  }\n}",...RightAuto.parameters?.docs?.source},description:{story:"自适应容器高度截断",...RightAuto.parameters?.docs?.description}}},RightCustom.parameters={...RightCustom.parameters,docs:{...RightCustom.parameters?.docs,source:{originalSource:"{\n  args: {\n    lines: 2,\n    content: text,\n    fold: false,\n    resetFoldWhenChildrenOrEllipsisChange: true,\n    showTitleWhenFold: true,\n    renderFoldButton: fold => {\n      return <Button size='small' type='link' color='primary' iconPosition='end' icon={fold ? <DownOutlined /> : <UpOutlined />}>\n        自定义{fold ? '展开' : '收起'}\n      </Button>;\n    }\n  }\n}",...RightCustom.parameters?.docs?.source}}},Bottom.parameters={...Bottom.parameters,docs:{...Bottom.parameters?.docs,source:{originalSource:"{\n  args: {\n    lines: 2,\n    uiType: 'bottom',\n    showTitleWhenFold: true,\n    titleWhenFold: '如果太长了hover我也就不展示全了，可自定义title文案',\n    content: text,\n    lineHeight: '22px'\n  }\n}",...Bottom.parameters?.docs?.source}}},RichText.parameters={...RichText.parameters,docs:{...RichText.parameters?.docs,source:{originalSource:"{\n  args: {\n    lines: 7,\n    uiType: 'bottom',\n    content: element\n  }\n}",...RichText.parameters?.docs?.source}}},RichTextHeightMode.parameters={...RichTextHeightMode.parameters,docs:{...RichTextHeightMode.parameters?.docs,source:{originalSource:"{\n  args: {\n    lines: 3,\n    maxHeight: 240,\n    truncateMode: 'height',\n    uiType: 'bottom',\n    content: element\n  }\n}",...RichTextHeightMode.parameters?.docs?.source}}},RichTextHeightModeAuto.parameters={...RichTextHeightModeAuto.parameters,docs:{...RichTextHeightModeAuto.parameters?.docs,source:{originalSource:"{\n  args: {\n    // lines: 7,\n    // maxHeight: 240,\n    truncateMode: 'height',\n    uiType: 'bottom',\n    content: element,\n    // 未设置于truncateMode对应lines或maxHeight属性时，内容撑满容器，一般不显示展开/折叠按钮（展开溢出容器看不见)\n    showFoldControl: false,\n    style: {\n      height: 220,\n      backgroundColor: 'pink'\n    }\n  }\n}",...RichTextHeightModeAuto.parameters?.docs?.source},description:{story:"自适应容器高度截断",...RichTextHeightModeAuto.parameters?.docs?.description}}},CustomWithTooltip.parameters={...CustomWithTooltip.parameters,docs:{...CustomWithTooltip.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const [visible, setVisible] = useState(false);\n    const [title, setTitle] = useState('');\n    const handleVisibleChange = useCallback((newVisible: boolean) => {\n      console.log('handleVisibleChange newVisible', newVisible);\n      setVisible(newVisible);\n    }, []);\n    const handleStatusChange = useCallback<NonNullable<TextEllipsisProps['onStatusChange']>>(status => {\n      console.log('触发了 onStatusChange 回调', status);\n      const {\n        ellipsis,\n        fold,\n        title\n      } = status;\n      if (ellipsis && fold && title) {\n        setTitle(title);\n      } else {\n        setTitle('');\n        setVisible(false);\n      }\n    }, []);\n    return <Tooltip title={<div style={{\n      maxHeight: 350,\n      overflowY: 'auto'\n    }}>{title}</div>} open={visible} onOpenChange={title ? handleVisibleChange : undefined} placement='bottomRight' mouseEnterDelay={0.3}>\n        <TextEllipsis {...args} onStatusChange={handleStatusChange} />\n      </Tooltip>;\n  },\n  args: {\n    lines: 2,\n    uiType: 'right',\n    content: '适合不是特别长的文本，太长出滚动条比较丑:\\n' + text,\n    lineHeight: '22px',\n    onFoldChange: fold => {\n      console.log('触发了 onFoldChange 回调 fold', fold);\n    },\n    onEllipsisChange: ellipsis => {\n      console.log('触发了 onEllipsisChange 回调 ellipsis', ellipsis);\n    }\n  }\n}",...CustomWithTooltip.parameters?.docs?.source}}},CustomWithPopover.parameters={...CustomWithPopover.parameters,docs:{...CustomWithPopover.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const [visible, setVisible] = useState(false);\n    const [title, setTitle] = useState('');\n    const handleVisibleChange = useCallback((newVisible: boolean) => {\n      setVisible(newVisible);\n    }, []);\n    const handleStatusChange = useCallback<NonNullable<TextEllipsisProps['onStatusChange']>>(status => {\n      console.log('触发了 onStatusChange 回调', status);\n      const {\n        ellipsis,\n        fold,\n        title\n      } = status;\n      if (ellipsis && fold && title) {\n        setTitle(title);\n      } else {\n        setTitle('');\n        setVisible(false);\n      }\n    }, []);\n    return <Popover title={<div style={{\n      maxHeight: 300,\n      maxWidth: 400,\n      overflowY: 'auto'\n    }}>{title}</div>} open={visible} onOpenChange={title ? handleVisibleChange : undefined} placement='bottomRight' mouseEnterDelay={0.3}>\n        <TextEllipsis {...args} onStatusChange={handleStatusChange} />\n      </Popover>;\n  },\n  args: {\n    lines: 2,\n    uiType: 'right',\n    showFoldControl: false,\n    content: '适合超长文本，出滚动条:\\n' + text + text + text,\n    lineHeight: '22px',\n    onFoldChange: fold => {\n      console.log('触发了 onFoldChange 回调 fold', fold);\n    },\n    onEllipsisChange: ellipsis => {\n      console.log('触发了 onEllipsisChange 回调 ellipsis', ellipsis);\n    }\n  }\n}",...CustomWithPopover.parameters?.docs?.source}}},ShowWhiteSpace.parameters={...ShowWhiteSpace.parameters,docs:{...ShowWhiteSpace.parameters?.docs,source:{originalSource:"{\n  args: {\n    lines: 2,\n    content: text,\n    whiteSpace: 'pre-line'\n  }\n}",...ShowWhiteSpace.parameters?.docs?.source}}};try{TextEllipsis.displayName="TextEllipsis",TextEllipsis.__docgenInfo={description:"",displayName:"TextEllipsis",props:{className:{defaultValue:null,description:"自定义样式类名，会附加到根元素上",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"自定义样式",name:"style",required:!1,type:{name:"React.CSSProperties"}},uiType:{defaultValue:{value:"right"},description:"right | bottom 展开按钮在右下侧还是底部",name:"uiType",required:!1,type:{name:'"right" | "bottom"'}},truncateMode:{defaultValue:{value:"line"},description:"截断模式 (若某些浏览器不支持 webkitLineClamp，可降级切换为 height 模式)",name:"truncateMode",required:!1,type:{name:'"line" | "height"'}},maxHeight:{defaultValue:null,description:'truncateMode === "height" 时生效\n最大高度(number > 0)，没传或者传入无效值不限制，尝试取 lines * lineHeight，若仍无效 自动截断到容器的最大高度\n单位: px',name:"maxHeight",required:!1,type:{name:"number"}},lineHeight:{defaultValue:null,description:"（单位:px）未传入或无效（0也视为无效）则自动取当前文本的行高",name:"lineHeight",required:!1,type:{name:"React.CSSProperties"}},lines:{defaultValue:null,description:'truncateMode === "line" 时生效\n超过几行折叠(number > 0), 没传或者传入无效值不限制，自动截断到容器的最大高度',name:"lines",required:!1,type:{name:"number"}},maskBgColor:{defaultValue:{value:"#fff"},description:"展开按钮蒙层背景色(仅支持16进制表示)",name:"maskBgColor",required:!1,type:{name:"string"}},content:{defaultValue:null,description:"text｜ReactNode  与children任传一个",name:"content",required:!1,type:{name:"React.ReactNode"}},resetFoldWhenChildrenOrEllipsisChange:{defaultValue:{value:"false"},description:"当 content or children or ellipsis 变化时，重置 fold 状态",name:"resetFoldWhenChildrenOrEllipsisChange",required:!1,type:{name:"boolean"}},fold:{defaultValue:{value:"true"},description:"折叠状态",name:"fold",required:!1,type:{name:"boolean"}},showFoldControl:{defaultValue:{value:"true"},description:"显示展开控制按钮",name:"showFoldControl",required:!1,type:{name:"boolean"}},controlPlacement:{defaultValue:{value:"center"},description:"展开按钮位置 uiType='bottom'时有效",name:"controlPlacement",required:!1,type:{name:'"right" | "left" | "center"'}},foldText:{defaultValue:{value:"收起"},description:"展开按钮文字",name:"foldText",required:!1,type:{name:"string"}},unfoldText:{defaultValue:{value:"展开"},description:"展开按钮文字",name:"unfoldText",required:!1,type:{name:"string"}},showTitleWhenFold:{defaultValue:{value:"false"},description:"折叠状态下是否显示title属性",name:"showTitleWhenFold",required:!1,type:{name:"boolean"}},titleWhenFold:{defaultValue:null,description:"折叠状态自定义title属性内容",name:"titleWhenFold",required:!1,type:{name:"string | ((title: string) => string)"}},whiteSpace:{defaultValue:null,description:"是否保留换行",name:"whiteSpace",required:!1,type:{name:"React.CSSProperties"}},width:{defaultValue:null,description:"容器宽度（默认自适应内容）\n应用场景：whiteSpace='pre*' 时，支持展示换行符，自适应内容可能导致控制按钮位置不确定",name:"width",required:!1,type:{name:"React.CSSProperties"}},renderFoldButton:{defaultValue:null,description:"自定义渲染展开按钮",name:"renderFoldButton",required:!1,type:{name:"(fold: boolean) => React.ReactNode"}},onFoldChange:{defaultValue:null,description:"@param fold 折叠状态，true 折叠，false 展开",name:"onFoldChange",required:!1,type:{name:"(fold: boolean) => void"}},onEllipsisChange:{defaultValue:null,description:"@param ellipsis 是否截断，true 截断，false 未截断",name:"onEllipsisChange",required:!1,type:{name:"(ellipsis: boolean) => void"}},onStatusChange:{defaultValue:null,description:"关键状态变更触发\n@param status",name:"onStatusChange",required:!1,type:{name:"(status: { fold: boolean; ellipsis: boolean; title?: string; }) => void"}},onMouseEnter:{defaultValue:null,description:"",name:"onMouseEnter",required:!0,type:{name:"React.DOMAttributes<HTMLDivElement>"}},onMouseLeave:{defaultValue:null,description:"",name:"onMouseLeave",required:!0,type:{name:"React.DOMAttributes<HTMLDivElement>"}},onPointerEnter:{defaultValue:null,description:"",name:"onPointerEnter",required:!0,type:{name:"React.DOMAttributes<HTMLDivElement>"}},onPointerLeave:{defaultValue:null,description:"",name:"onPointerLeave",required:!0,type:{name:"React.DOMAttributes<HTMLDivElement>"}},onFocus:{defaultValue:null,description:"",name:"onFocus",required:!0,type:{name:"React.DOMAttributes<HTMLDivElement>"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!0,type:{name:"React.DOMAttributes<HTMLDivElement>"}},ref:{defaultValue:null,description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).\n@see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}",name:"ref",required:!1,type:{name:"LegacyRef<HTMLDivElement>"}},key:{defaultValue:null,description:"",name:"key",required:!1,type:{name:"Key"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/text-ellipsis/src/index.stories.tsx#TextEllipsis"]={docgenInfo:TextEllipsis.__docgenInfo,name:"TextEllipsis",path:"src/components/text-ellipsis/src/index.stories.tsx#TextEllipsis"})}catch(__react_docgen_typescript_loader_error){}try{RightAuto.displayName="RightAuto",RightAuto.__docgenInfo={description:"自适应容器高度截断",displayName:"RightAuto",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/text-ellipsis/src/index.stories.tsx#RightAuto"]={docgenInfo:RightAuto.__docgenInfo,name:"RightAuto",path:"src/components/text-ellipsis/src/index.stories.tsx#RightAuto"})}catch(__react_docgen_typescript_loader_error){}try{RichTextHeightModeAuto.displayName="RichTextHeightModeAuto",RichTextHeightModeAuto.__docgenInfo={description:"自适应容器高度截断",displayName:"RichTextHeightModeAuto",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/text-ellipsis/src/index.stories.tsx#RichTextHeightModeAuto"]={docgenInfo:RichTextHeightModeAuto.__docgenInfo,name:"RichTextHeightModeAuto",path:"src/components/text-ellipsis/src/index.stories.tsx#RichTextHeightModeAuto"})}catch(__react_docgen_typescript_loader_error){}}}]);