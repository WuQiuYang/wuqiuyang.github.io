"use strict";(self.webpackChunk_ohkit_site=self.webpackChunk_ohkit_site||[]).push([[977],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}},[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./src/utils/packages/auto-reporter/Doc.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/next/dist/compiled/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),md_playground=__webpack_require__("./src/components/md-playground/index.tsx");const README_namespaceObject="# `@ohkit/auto-reporter`\n\n> 自动数据上报工具，适用于自动保存、操作频次打点等场景\n\n## 安装\n```bash\nnpm install @ohkit/auto-reporter\n```\n\n## 功能特性\n- 基于时间和操作次数的自动上报触发\n- 支持页面关闭前的数据上报\n- 可配置的上报策略\n- 支持Promise串行上报\n\n## 基本用法\n\n```ts\nimport { AutoReporter } from '@ohkit/auto-reporter';\n\nconst reporter = new AutoReporter({\n  onReport: async () => {\n    // 上报逻辑\n    await saveData();\n  }\n});\n\n// 数据变更时调用\nreporter.change();\n\n// 手动立即上报\nreporter.flush();\n```\n\n## 详见示例\n- [更多Demo](https://wuqiuyang.github.io/ohkit/storybook-static/?path=/story/utils-packages-auto-reporter-src)\n\n## 配置参数\n\n| 参数 | 说明 | 类型 | 默认值 |\n|------|------|------|--------|\n| onReport | 上报回调函数 | `() => Promise<void> \\| void` | - |\n| maxTimes | 最大变更次数触发上报 | number | 20 |\n| duration | 最长等待时间(ms) | number | 30000 |\n| triggerFlushBeforeUnload | 是否在页面关闭前上报 | boolean | true |\n| reportPipe | 是否串行上报 | boolean | false |\n| beforeUploadConfirm | 页面关闭前是否提示用户 | boolean | false |\n\n## API 说明\n\n### AutoReporter 类\n\n#### 方法\n\n| 方法 | 说明 | 返回值 |\n|------|------|--------|\n| change() | 记录数据变更 | void |\n| flush() | 立即触发上报 | `Promise<void> \\| void` |\n| reset() | 重置上报状态 | void |\n| cancel() | 取消上报(同reset) | void |\n| updateConfig() | 更新配置 | void |\n| register() | 注册上报回调 | void |\n\n#### 属性\n\n| 属性 | 说明 | 类型 |\n|------|------|------|\n| pending | 是否有待上报数据 | boolean |\n\n## 高级用法\n\n### 自定义上报策略\n\n```ts\nconst reporter = new AutoReporter({\n  maxTimes: 10, // 10次变更后上报\n  duration: 5000, // 或5秒后上报\n  onReport: saveData\n});\n```\n\n### 串行上报\n\n```ts\nconst reporter = new AutoReporter({\n  reportPipe: true, // 确保上报顺序\n  onReport: async () => {\n    // 串行执行的上报逻辑\n  }\n});\n```\n\n## 注意事项\n1. 确保onReport回调正确处理Promise\n2. 在SPA应用中注意路由切换时的上报处理\n3. 高频操作场景建议适当调整maxTimes和duration";function _createMdxContent(props){return(0,jsx_runtime.jsx)(md_playground.f,{children:README_namespaceObject})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent()}},"./src/components/md-playground/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{f:()=>MDPlayground});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react_markdown__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-markdown/lib/index.js"),remark_gfm__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/remark-gfm/lib/index.js"),react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react-syntax-highlighter/dist/esm/prism.js");const MDPlayground=props=>{const{children,theme="vscDarkPlus"}=props;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_markdown__WEBPACK_IMPORTED_MODULE_1__.oz,{children,remarkPlugins:[remark_gfm__WEBPACK_IMPORTED_MODULE_2__.A],components:{code({node,inline,className,children,key,ref,...props}){const match=/language-(\w+)/.exec(className||"");return!inline&&match?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{ref:r=>{"function"==typeof ref&&ref(r)},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_3__.A,{children:String(children).replace(/\n$/,""),style:__webpack_require__("./node_modules/react-syntax-highlighter/dist/esm/styles/prism/index.js")[theme],language:match[1],PreTag:"div",...props})},key):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("code",{className,...props,children})}}})};try{MDPlayground.displayName="MDPlayground",MDPlayground.__docgenInfo={description:"",displayName:"MDPlayground",props:{theme:{defaultValue:{value:"vscDarkPlus"},description:"主题",name:"theme",required:!1,type:{name:"CodeTheme"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/md-playground/index.tsx#MDPlayground"]={docgenInfo:MDPlayground.__docgenInfo,name:"MDPlayground",path:"src/components/md-playground/index.tsx#MDPlayground"})}catch(__react_docgen_typescript_loader_error){}}}]);