"use strict";(self.webpackChunk_ohkit_site=self.webpackChunk_ohkit_site||[]).push([[127],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}},[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./src/utils/packages/sse/Doc.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("./node_modules/next/dist/compiled/react/index.js");var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),md_playground=__webpack_require__("./src/components/md-playground/index.tsx");const README_namespaceObject='# `@ohkit/sse`\n\n> Server-Sent Events (SSE) 处理工具，用于解析和分割SSE流数据\n\n## 安装\n```bash\nnpm install @ohkit/sse\n```\n\n## 功能特性\n- SSE流数据解析\n- 流数据分割处理\n- JSON数据自动解析\n- 支持多种事件类型(message/heartbeat/error/end)\n\n## 基本用法\n\n### 解析SSE流\n```ts\nimport { formatSSEStream } from \'@ohkit/sse\';\n\nconst events = formatSSEStream(`\nid:1\nevent:message\ndata:{"status":"success","data":{"key":"value"}}\n\nid:2\nevent:message\ndata:{"status":"success","data":{"key":"value2"}}\n`);\n\nevents.forEach(event => {\n  console.log(event.dataJson); // 已解析的JSON数据\n});\n```\n\n### 流分割器\n```ts\nimport { createSSEStreamSpliter } from \'@ohkit/sse\';\n\nconst splitter = createSSEStreamSpliter();\n\n// 在XHR onprogress回调中使用\nconst onprogress = (text) => {\n  const completeEvents = splitter(text);\n  if (completeEvents) {\n    const parsedEvents = formatSSEStream(completeEvents);\n    // 处理完整事件\n  }\n};\n```\n\n## API 说明\n\n### 方法\n\n| 方法 | 说明 | 参数 | 返回值 |\n|------|------|------|--------|\n| formatSSEStream | 解析SSE流数据 | `stream: string` | `SSEEvent[]` |\n| createSSEStreamSpliter | 创建流分割器 | - | `(text: string) => string` |\n\n### 类型\n\n| 类型 | 说明 |\n|------|------|\n| SSEEvent | SSE事件对象结构 |\n| IEventData | 事件数据格式 |\n| ResponseJSON | 响应JSON格式 |\n\n## 高级用法\n\n### 处理分块流\n```ts\nconst splitter = createSSEStreamSpliter();\nlet buffer = \'\';\n\nfunction handleStreamChunk(chunk) {\n  buffer += chunk;\n  const completeEvents = splitter(buffer);\n  \n  if (completeEvents) {\n    const events = formatSSEStream(completeEvents);\n    events.forEach(event => {\n      // 处理每个完整事件\n    });\n  }\n}\n```\n\n### 自定义事件处理\n```ts\nconst events = formatSSEStream<CustomData>(stream);\n\nevents.forEach(event => {\n  if (event.event === \'message\') {\n    const customData = event.dataJson as CustomData;\n    // 处理自定义数据\n  }\n});\n```\n\n## 注意事项\n1. 确保服务端发送的SSE格式正确\n2. 处理分块数据时注意缓冲区管理\n3. 错误事件需要特殊处理';function _createMdxContent(props){return(0,jsx_runtime.jsx)(md_playground.f,{children:README_namespaceObject})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent()}},"./src/components/md-playground/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{f:()=>MDPlayground});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),react_markdown__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react-markdown/lib/index.js"),remark_gfm__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/remark-gfm/lib/index.js"),react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react-syntax-highlighter/dist/esm/prism.js");const MDPlayground=props=>{const{children,theme="vscDarkPlus"}=props;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_markdown__WEBPACK_IMPORTED_MODULE_1__.oz,{children,remarkPlugins:[remark_gfm__WEBPACK_IMPORTED_MODULE_2__.A],components:{code({node,inline,className,children,key,ref,...props}){const match=/language-(\w+)/.exec(className||"");return!inline&&match?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{ref:r=>{"function"==typeof ref&&ref(r)},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_3__.A,{children:String(children).replace(/\n$/,""),style:__webpack_require__("./node_modules/react-syntax-highlighter/dist/esm/styles/prism/index.js")[theme],language:match[1],PreTag:"div",...props})},key):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("code",{className,...props,children})}}})};try{MDPlayground.displayName="MDPlayground",MDPlayground.__docgenInfo={description:"",displayName:"MDPlayground",props:{theme:{defaultValue:{value:"vscDarkPlus"},description:"主题",name:"theme",required:!1,type:{name:"CodeTheme"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/md-playground/index.tsx#MDPlayground"]={docgenInfo:MDPlayground.__docgenInfo,name:"MDPlayground",path:"src/components/md-playground/index.tsx#MDPlayground"})}catch(__react_docgen_typescript_loader_error){}}}]);